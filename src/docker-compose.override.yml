version: '3.4'

networks:
  default:
    name: eshop
    external: false

services:
  catalogdb:
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"

  discountdb:
    container_name: discountdb
    environment:
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=admin1234
        - POSTGRES_DB=DiscountDb
    restart: always
    ports:
        - "5432:5432"
    volumes:
        - postgres_data:/var/lib/postgresql/data/

  orderdb:
    container_name: orderdb
    environment:
        SA_PASSWORD: "BeH007826790"
        ACCEPT_EULA: "Y"
    restart: always
    ports:
        - "1432:1433"

  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
        - "5672:5672"
        - "15672:15672"
    volumes: 
        - rabbitmq_data:/var/lib/rabbitmq
    hostname: rabbitmq

  pgadmin:
    container_name: pgadmin
    environment:
        - PGADMIN_DEFAULT_EMAIL=admin@eshop.com
        - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
        - "5050:80"
    volumes:
        - pgadmin_data:/root/.pgadmin

  catalog.api:
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=mongodb://catalogdb:27017"
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - elasticSearchConnectionString=http://elasticsearch:9200
    depends_on:
      - catalogdb
    ports:
      - "8000:80"
      - "9000:81" 

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "CacheSettings:ConnectionString=basketdb:6379"
      - Urls__GrpcDiscount=http://discount.api:81
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672
      - elasticSearchConnectionString=http://elasticsearch:9200
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "8001:80"
      - "9001:81"

  discount.api:
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - elasticSearchConnectionString=http://elasticsearch:9200
    depends_on:
      - discountdb
    ports:
      - "8002:80"
      - "9002:81"

  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__OrderingConnectionString=Server=orderdb,1433;Database=OrderDb;User Id=sa;Password=BeH007826790;TrustServerCertificate=true
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672
      - elasticSearchConnectionString=http://elasticsearch:9200
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "8003:80"
      - "9003:81" 


  web.shopping.httpaggregator:
    container_name: web.shopping.httpaggregator
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ReverseProxy__Clusters__basket__Destinations__destination0__Address=http://basket.api
      - ReverseProxy__Clusters__catalog__Destinations__destination0__Address=http://catalog.api
      - ReverseProxy__Clusters__orders__Destinations__destination0__Address=http://ordering.api
      - ReverseProxy__Clusters__discount__Destinations__destination0__Address=http://discount.api
      - CatalogUrlHC=http://catalog.api/hc
      - BasketUrlHC=http://basket.api/hc
      - DiscountUrlHC=http://discount.api/hc
      - OrderingUrlHC=http://ordering.api/hc
      - Urls__GrpcBasket=http://basket.api:81
      - Urls__GrpcCatalog=http://catalog.api:81
      - Urls__GrpcOrdering=http://ordering.api:81
      - elasticSearchConnectionString=http://lasticsearch:9200
    depends_on:
      - basket.api
      - catalog.api
      - discount.api
      - ordering.api
    ports:
      - "8080:80"


  webmvc:
    container_name: webmvc
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ApiSettings__GatewayAddress=http://web.shopping.httpaggregator
      - WebShoppingHttpaggregatorUrlHC=http://web.shopping.httpaggregator/hc
      - elasticSearchConnectionString=http://elasticsearch:9200
    ports:
      - "8004:80"
    depends_on:
      - web.shopping.httpaggregator
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro

  webstatus:
    container_name: webstatus
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - HealthChecksUI__HealthChecks__0__Name=Catalog HTTP Check
      - HealthChecksUI__HealthChecks__0__Uri=http://catalog.api/hc
      - HealthChecksUI__HealthChecks__1__Name=Basket HTTP Check
      - HealthChecksUI__HealthChecks__1__Uri=http://basket.api/hc
      - HealthChecksUI__HealthChecks__2__Name=Discount HTTP Check
      - HealthChecksUI__HealthChecks__2__Uri=http://discount.api/hc
      - HealthChecksUI__HealthChecks__3__Name=Ordering HTTP Check
      - HealthChecksUI__HealthChecks__3__Uri=http://ordering.api/hc
      - HealthChecksUI__HealthChecks__4__Name=Web httpaggregator HTTP Check
      - HealthChecksUI__HealthChecks__4__Uri=http://web.shopping.httpaggregator/hc
      - HealthChecksUI__HealthChecks__5__Name=Webmvc HTTP Check
      - HealthChecksUI__HealthChecks__5__Uri=http://webmvc/hc 
    depends_on:
      - basket.api
      - discount.api
      - catalog.api
      - ordering.api
      - web.shopping.httpaggregator 
      - webmvc
    ports:
      - "8005:80"

  # setup:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       if [ x${ELASTIC_PASSWORD} == x ]; then
  #         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       elif [ x${KIBANA_PASSWORD} == x ]; then
  #         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: elasticsearch\n"\
  #         "    dns:\n"\
  #         "      - elasticsearch\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: kibana\n"\
  #         "    dns:\n"\
  #         "      - kibana\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: fleet-server\n"\
  #         "    dns:\n"\
  #         "      - fleet-server\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions"
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";'
        
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120

  elasticsearch:
    container_name: elasticsearch
    # depends_on:
    #   setup:
    #     condition: service_healthy
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      # - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      # - node.name=elasticsearch
      # - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - xpack.security.enabled=false
      # - bootstrap.memory_lock=true
      # - xpack.security.enabled=true
      # - xpack.security.http.ssl.enabled=true
      # - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      # - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.enabled=true
      # - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      # - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # healthcheck:
    #   test:
    #     [
    #       "CMD-SHELL",
    #       "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
    #     ]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 120

  kibana:
    container_name: kibana
    depends_on:
      - elasticsearch
        # condition: service_healthy
    labels:
      co.elastic.logs/module: kibana
    volumes:
      # - certs:/usr/share/kibana/config/certs
      - kibana-data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      # - ELASTICSEARCH_USERNAME=kibana_system
      # - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      # - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      # - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      # - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      # - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      # - SERVER_SSL_ENABLED=true
      # - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      # - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      # - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    container_name: metricbeat
    depends_on:
      - elasticsearch
      - kibana
        # condition: service_healthy
    user: root
    volumes:
      # - certs:/usr/share/metricbeat/certs
      - metricbeat-data:/usr/share/metricbeat/data
      - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      # - ELASTIC_USER=elastic
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
      # - CA_CERT=certs/ca/ca.crt
      # - ES_CERT=certs/elasticsearch/elasticsearch.crt
      # - ES_KEY=certs/elasticsearch/elasticsearch.key
      # - KB_CERT=certs/kibana/kibana.crt
      # - KB_KEY=certs/kibana/kibana.key
    command:
      -strict.perms=false

  filebeat:
    container_name: filebeat
    depends_on:
      - elasticsearch
    user: root
    volumes:
      # - certs:/usr/share/filebeat/certs
      - filebeat-data:/usr/share/filebeat/data
      - "./filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
      # - CA_CERT=certs/ca/ca.crt
    command:
      -strict.perms=false

  logstash:
    container_name: logstash
    depends_on:
      - elasticsearch
      - kibana
    labels:
      co.elastic.logs/module: logstash
    user: root
    ports:
      - 5044:5044
    volumes:
      # - certs:/usr/share/logstash/certs
      - logstash-data:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      # - ELASTIC_USER=elastic
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://elasticsearch:9200

  # fleet-server:
  #   container_name: fleet-server
  #   depends_on:
  #     kibana:
  #       condition: service_healthy
  #     elasticsearch:
  #       condition: service_healthy
  #   volumes:
  #     - certs:/certs
  #     - fleetserver-data:/usr/share/elastic-agent
  #     - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
  #     - "/proc:/hostfs/proc:ro"
  #     - "/:/hostfs:ro"
  #   ports:
  #     - ${FLEET_PORT}:8220
  #     - ${APMSERVER_PORT}:8200
  #   user: root
  #   environment:
  #     - SSL_CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
  #     - CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
  #     - FLEET_CA=/certs/ca/ca.crt
  #     - FLEET_ENROLL=1
  #     - FLEET_INSECURE=true
  #     - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
  #     - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch:9200
  #     - FLEET_SERVER_ELASTICSEARCH_INSECURE=true
  #     - FLEET_SERVER_ENABLE=1
  #     - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
  #     - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
  #     - FLEET_SERVER_INSECURE_HTTP=true
  #     - FLEET_SERVER_POLICY_ID=fleet-server-policy
  #     - FLEET_URL=https://fleet-server:8220
  #     - KIBANA_FLEET_CA=/certs/ca/ca.crt
  #     - KIBANA_FLEET_SETUP=1
  #     - KIBANA_FLEET_USERNAME=elastic
  #     - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
  #     - KIBANA_HOST=https://kibana:5601

  grafana:
    container_name: grafana
    ports:
        - "3000:3000"
    volumes:
        - grafana-data:/usr/share/elasticsearch/data
